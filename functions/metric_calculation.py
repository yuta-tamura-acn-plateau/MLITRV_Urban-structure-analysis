"""
/***************************************************************************
 PlateauStatisticsVisualizationPlugin
                                 A QGIS plugin
 Urban Structure Assessment Dashboard
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-29
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Author
        email                : mail
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import sys
import xml.etree.ElementTree as ET

from PyQt5.QtCore import QCoreApplication, QSize, Qt # pylint: disable=import-error, no-name-in-module
from PyQt5.QtWidgets import (QApplication, QDialog, QFileDialog, # pylint: disable=import-error, no-name-in-module
                             QHBoxLayout, QLabel, QLineEdit,
                             QPushButton, QVBoxLayout, QMessageBox,
                             QProgressDialog)
from ..algorithms.workers.metric_calculation_worker import (
    MetricCalculationWorker
)

class MetricCalculation(QDialog):
    """
    メトリック計算と構成管理を行うためのダイアログクラス

    このクラスは、ユーザーが入力フォルダや出力フォルダ、各種しきい値を設定できる
    ユーザーインターフェースを提供します。設定内容をXMLファイルに保存したり、
    計算プロセスを実行して進捗状況を表示する機能を含みます。
    また、処理中のエラーやキャンセルにも対応しています。

    属性:
        config_dir (str): 構成ファイルが保存されるディレクトリのパス。
        config_file (str): メトリック計算に関連する設定ファイルのパス。
        visualization_config_file (str): 可視化設定ファイルのパス。
        progress_dialog (QProgressDialog): 計算プロセスの進行状況を表示するダイアログ。
        worker (MetricCalculationWorker): 計算処理を担当するワーカーオブジェクト。

    メソッド:
        __init__(self, translator=None): ダイアログを初期化し、翻訳機能を設定します。
        setup_translator(translator): 国際化のための翻訳機能を設定します。
        ensure_config_dir(): 構成ディレクトリが存在しない場合は作成します。
        initUI(): メトリック計算ダイアログのユーザーインターフェースを初期化します。
        createBrowseRow(): フォルダ選択用の行を作成します。
        browseFolder(line_edit): フォルダを選択するダイアログを開きます。
        loadSettings(): 構成ファイルから設定を読み込み、ダイアログに反映させます。
        saveSettings(): 現在の設定を構成ファイルに保存します。
        accept(): ダイアログの受け入れを処理し、設定を保存して計算プロセスを実行します。
        run_process(): メトリック計算のプロセスを実行し、進行状況を表示します。
        update_progress(value): 進行状況バーを更新します。
        finish_process(message): 処理が完了したときに呼び出され、メッセージを表示します。
        handle_error(error_message): エラーが発生したときに呼び出され、エラーメッセージを表示します。
        cancel_process(): キャンセルボタンが押されたときに呼び出され、プロセスをキャンセルします。
        update_xml_paths(xml_file_path, input_folder_path):
            指定されたXMLファイル内のパスを新しい入力フォルダパスで更新します。
    """
    def __init__(self, translator=None):
        super().__init__()
        self.setup_translator(translator)
        self.config_dir = os.path.join(
            os.path.dirname(os.path.abspath(__file__)), '../config'
        )
        self.config_file = os.path.join(
            self.config_dir, 'MetricCalculationConfig.xml'
        )
        self.visualization_config_file = os.path.join(
            self.config_dir, 'VisualizationConfig.xml'
        )

        self.progress_dialog = None
        self.worker = None

        self.ensure_config_dir()
        self.initUI()
        self.loadSettings()

    def setup_translator(self, translator):
        """
        国際化のための翻訳機能を設定します
        
        :param translator: 翻訳オブジェクト
        :type translator: QTranslator
        """
        if translator:
            QCoreApplication.installTranslator(translator)

    def ensure_config_dir(self):
        """"構成ディレクトリの存在を確認する関数"""
        if not os.path.exists(self.config_dir):
            os.makedirs(self.config_dir)

    def initUI(self):
        """メトリック計算ダイアログのユーザーインターフェースを初期化する関数"""
        self.setWindowTitle(self.tr('Metric Calculation'))
        layout = QVBoxLayout()

        layout.addWidget(QLabel(self.tr('Input Data Folder')))
        self.input_folder = self.createBrowseRow()
        layout.addLayout(self.input_folder)

        layout.addWidget(QLabel(self.tr('Output Data Folder')))
        self.output_folder = self.createBrowseRow()
        layout.addLayout(self.output_folder)

        layout.addWidget(QLabel(self.tr('Threshold for Bus (m)')))
        self.threshold_bus = QLineEdit()
        layout.addWidget(self.threshold_bus)

        layout.addWidget(QLabel(self.tr('Threshold for Railway (m)')))
        self.threshold_railway = QLineEdit()
        layout.addWidget(self.threshold_railway)

        layout.addWidget(QLabel(self.tr('Threshold for Shelter (m)')))
        self.threshold_shelter = QLineEdit()
        layout.addWidget(self.threshold_shelter)

        button_layout = QHBoxLayout()
        ok_button = QPushButton(self.tr('OK'))
        ok_button.clicked.connect(self.accept)
        cancel_button = QPushButton(self.tr('Cancel'))
        cancel_button.clicked.connect(self.reject)
        button_layout.addWidget(ok_button)
        button_layout.addWidget(cancel_button)
        layout.addLayout(button_layout)

        self.setLayout(layout)

        self.resize(700, 350)
        self.setMinimumSize(300, 200)

        self.setWindowFlags(
            self.windowFlags() & ~Qt.WindowContextHelpButtonHint
        )

        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(10)

        button_size = QSize(100, 30)
        for button in [ok_button, cancel_button]:
            button.setMinimumSize(button_size)
            button.setMaximumSize(button_size)

    def createBrowseRow(self):
        """
        フォルダ選択用の行を作成する関数

        :return: フォルダ選択のためのレイアウト
        :rtype: QHBoxLayout
        """
        layout = QHBoxLayout()
        line_edit = QLineEdit()
        layout.addWidget(line_edit)
        browse_button = QPushButton('...')
        browse_button.clicked.connect(lambda: self.browseFolder(line_edit))
        layout.addWidget(browse_button)
        return layout

    def browseFolder(self, line_edit):
        """
        フォルダを参照して選択するダイアログを開く関数

        :param line_edit: フォルダパスを表示するQLineEdit
        :type line_edit: QLineEdit
        """
        folder = QFileDialog.getExistingDirectory(
            self, self.tr("Select Folder")
        )
        if folder:
            line_edit.setText(folder)

    def loadSettings(self):
        """構成ファイルから設定を読み込み、ダイアログに反映させる関数"""
        try:
            tree = ET.parse(self.config_file)
            root = tree.getroot()
            self.input_folder.itemAt(0).widget().setText(
                root.find('input_folder').text
            )
            self.output_folder.itemAt(0).widget().setText(
                root.find('output_folder').text
            )
            self.threshold_bus.setText(root.find('threshold_bus').text)
            self.threshold_railway.setText(root.find('threshold_railway').text)
            self.threshold_shelter.setText(root.find('threshold_shelter').text)
        except FileNotFoundError:
            print(self.tr(
                "Configuration file not found. Using default values."
            ))
        except ET.ParseError:
            print(self.tr("XML parsing error. Using default values."))

    def saveSettings(self):
        """現在の設定を構成ファイルに保存する関数"""
        root = ET.Element('config')
        ET.SubElement(
            root, 'input_folder'
        ).text = self.input_folder.itemAt(0).widget().text()

        ET.SubElement(
            root, 'output_folder'
        ).text = self.output_folder.itemAt(0).widget().text()
        ET.SubElement(root, 'threshold_bus').text = self.threshold_bus.text()
        ET.SubElement(
            root, 'threshold_railway'
        ).text = self.threshold_railway.text()
        ET.SubElement(
            root, 'threshold_shelter'
        ).text = self.threshold_shelter.text()

        tree = ET.ElementTree(root)
        tree.write(self.config_file, encoding='utf-8', xml_declaration=True)

    def accept(self):
        """ダイアログの受け入れが押されたときに呼び出され、設定を保存してプロセスを実行します"""
        # 必須フィールドの確認
        input_folder_path = self.input_folder.itemAt(0).widget().text()
        output_folder_path = self.output_folder.itemAt(0).widget().text()
        threshold_bus = self.threshold_bus.text()
        threshold_railway = self.threshold_railway.text()
        threshold_shelter = self.threshold_shelter.text()

        missing_fields = []
        if not input_folder_path:
            missing_fields.append(self.tr("Input Data Folder"))
        if not output_folder_path:
            missing_fields.append(self.tr("Output Data Folder"))
        if not threshold_bus:
            missing_fields.append(self.tr("Threshold for Bus (m)"))
        if not threshold_railway:
            missing_fields.append(self.tr("Threshold for Railway (m)"))
        if not threshold_shelter:
            missing_fields.append(self.tr("Threshold for Shelter (m)"))

        if missing_fields:
            QMessageBox.warning(
                self,
                self.tr("Missing Required Fields"),
                self.tr("%1").replace(
                    "%1",
                    "\n" + "\n".join(f"- {field}" for field in missing_fields)
                ),
            )
            return  # 処理を中断

        # 設定を保存してプロセスを実行
        self.saveSettings()
        self.run_process()

    def run_process(self):
        """メトリック計算のプロセスを実行し、進行状況を表示します"""
        # 入力/出力フォルダのパス
        input_folder_path = self.input_folder.itemAt(0).widget().text()
        output_folder_path = self.output_folder.itemAt(0).widget().text()
        threshold_bus = self.threshold_bus.text()
        threshold_railway = self.threshold_railway.text()
        threshold_shelter = self.threshold_shelter.text()

        # グラフのための構成パスの更新
        self.update_xml_paths(
            self.visualization_config_file, output_folder_path
        )

        # 進行状況ダイアログの作成
        self.progress_dialog = QProgressDialog(
            self.tr("Processing..."), self.tr("Cancel"), 0, 100, self
        )
        self.progress_dialog.setWindowTitle("進捗状況")
        self.progress_dialog.setWindowModality(Qt.WindowModal)
        self.progress_dialog.setAutoClose(False)  # 自動的に閉じないように設定
        self.progress_dialog.setAutoReset(False)  # 自動的にリセットしないように設定
        self.progress_dialog.canceled.connect(self.cancel_process)  # 操作をキャンセルする
        self.progress_dialog.show()

        # QThreadワーカーの作成
        self.worker = MetricCalculationWorker(
            input_folder_path, output_folder_path, threshold_bus,
            threshold_railway, threshold_shelter
        )
        self.worker.progress.connect(self.update_progress)
        self.worker.finished.connect(self.finish_process)
        self.worker.error.connect(self.handle_error)
        self.worker.start()

    def update_progress(self, value):
        """
        進捗バーを更新する関数

        :param value: 現在の進行状況の値
        :type value: int
        """
        self.progress_dialog.setValue(value)

    def finish_process(self, message):
        """
        処理が完了したときに呼び出され、メッセージを表示する関数

        :param message: 完了メッセージ
        :type message: str
        """
        self.progress_dialog.close()
        QMessageBox.information(self, "完了", message)

    def handle_error(self, error_message):
        """
        エラーが発生したときに呼び出され、メッセージを表示する関数

        :param error_message: エラーメッセージ
        :type error_message: str
        """
        self.progress_dialog.close()
        QMessageBox.critical(self, "エラー", error_message)

    def cancel_process(self):
        """キャンセルボタンが押されたときに呼び出され、プロセスをキャンセルする関数"""
        self.progress_dialog.setLabelText("キャンセル中...")
        # キャンセルボタンを無効にする
        cancel_button = self.progress_dialog.findChild(QPushButton)
        if cancel_button:
            cancel_button.setEnabled(False)

        self.progress_dialog.show()
        self.worker.cancel()

    @staticmethod
    def update_xml_paths(xml_file_path, input_folder_path):
        """
        指定されたファイル内のXMLパスを新しい入力フォルダパスで更新する関数

        :param xml_file_path: 更新するXMLファイルのパス
        :type xml_file_path: str
        :param input_folder_path: 新しい入力フォルダのパス
        :type input_folder_path: str
        """
        tree = ET.parse(xml_file_path)
        root = tree.getroot()

        for path_elem in root.findall(".//path"):
            old_path = path_elem.text
            filename = os.path.basename(old_path)
            new_path = os.path.join(input_folder_path, filename)
            path_elem.text = new_path

        tree.write(xml_file_path, encoding='utf-8', xml_declaration=True)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    dialog = MetricCalculation()
    if dialog.exec_() == QDialog.Accepted:
        print("Settings saved to XML file")
    sys.exit(app.exec_())
