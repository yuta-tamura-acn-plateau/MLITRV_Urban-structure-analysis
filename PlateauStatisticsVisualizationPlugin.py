"""
/***************************************************************************
 PlateauStatisticsVisualizationPlugin
                                 A QGIS plugin
 Urban Structure Assessment Dashboard
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-29
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Author
        email                : mail
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt # pylint: disable=import-error
from qgis.PyQt.QtGui import QIcon # pylint: disable=import-error
from qgis.PyQt.QtWidgets import QAction # pylint: disable=import-error
from .resources import * # pylint: disable=wildcard-import, unused-wildcard-import
from .PlateauStatisticsVisualizationPlugin_dockwidget import (
    PlateauStatisticsVisualizationPluginDockWidget
)
from .functions.create_directory import CreateDirectory
from .functions.metric_calculation import MetricCalculation
from .functions.visualization import ControlDock, GraphDock
from .functions.output import Output


class PlateauStatisticsVisualizationPlugin:
    """
    QGISプラグインの実装

    属性:
        iface (QgisInterface): QGISインターフェースへの参照。
        plugin_dir (str): プラグインのディレクトリパス。
        translator (QTranslator): 翻訳用のQTranslatorオブジェクト。
        actions (list): プラグインで作成したアクションのリスト。
        menu (str): プラグインのメニュー名。
        toolbar (QToolBar): プラグインのツールバー。
        pluginIsActive (bool): プラグインがアクティブかどうかを示すフラグ。
        dockwidget (PlateauStatisticsVisualizationPluginDockWidget):
            プラグインのDockWidget。
        control_dock (ControlDock): 可視化制御のDockWidget。
        graph_dock (GraphDock): グラフ表示のDockWidget。
        sub_graph_dock (GraphDock): 比較用グラフ表示のDockWidget。
        control_dock_called (bool): control_dockが呼ばれたかどうかを示すフラグ。

    メソッド:
        __init__(self, iface): QGISプラグインを初期化します。
        tr(self, message): Qtの翻訳APIを使用して文字列の翻訳を取得します。
        add_action(self, icon_path, text, callback, enabled_flag=True, 
                   add_to_menu=True, add_to_toolbar=True, status_tip=None, 
                   whats_this=None, parent=None): ツールバーにツールバーアイコンを追加します。
        initGui(self): QGIS GUI内でメニューエントリとツールバーアイコンを作成します。
        onClosePlugin(self): プラグインが閉じられたときに必要なクリーンアップを行います。
        unload(self): プラグインをQGIS GUIから削除します。
        run(self): プラグインをロードして起動する関数。
        _createDir(self): CreateDirectoryダイアログを使用してディレクトリ構造を作成する関数。
        _calcMetric(self): MetricCalculationダイアログを使用して指標計算を実行する関数。
        _visualizing(self): ControlDockおよびGraphDockを開き、可視化を行う関数。
        _output(self): データをエクスポートするためのOutputダイアログを開く関数。
    """

    def __init__(self, iface):
        # QGISインターフェースへの参照を保存
        self.iface = iface

        # プラグインディレクトリを初期化
        self.plugin_dir = os.path.dirname(__file__)

        # ロケールを初期化
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            f'PlateauStatisticsVisualizationPlugin_{locale}.qm')

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # インスタンス属性を宣言
        self.actions = []
        self.menu = self.tr('&Plateau Statistics Visualization Plugin')
        self.toolbar = self.iface.addToolBar(
            'PlateauStatisticsVisualizationPlugin'
        )
        self.toolbar.setObjectName('PlateauStatisticsVisualizationPlugin')

        #print "** INITIALIZING PlateauStatisticsVisualizationPlugin"

        self.pluginIsActive = False
        self.dockwidget = None
        self.control_dock = None
        self.graph_dock = None
        self.sub_graph_dock = None
        self.control_dock_called = False

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """
        Qtの翻訳APIを使用して文字列の翻訳を取得します。

        QObjectを継承していないため、これを独自に実装しています。

        :param message: 翻訳する文字列。
        :type message: str
        :returns: 翻訳されたメッセージ。
        :rtype: str
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate(
            'PlateauStatisticsVisualizationPlugin', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """
        ツールバーにツールバーアイコンを追加します

        :param icon_path: このアクションのアイコンのパス。
        リソースパス（例：':/plugins/foo/bar.png'）または通常のファイルシステムパスを指定可能です。
        :type icon_path: str
        :param text: このアクションのメニュー項目に表示されるテキスト。
        :type text: str
        :param callback: アクションがトリガーされたときに呼び出される関数。
        :type callback: function
        :param enabled_flag: アクションがデフォルトで有効であるべきかを示すフラグ。デフォルトはTrueです。
        :type enabled_flag: bool
        :param add_to_menu: アクションをメニューにも追加するかどうかを示すフラグ。デフォルトはTrueです。
        :type add_to_menu: bool
        :param add_to_toolbar: アクションをツールバーにも追加するかどうかを示すフラグ。デフォルトはTrueです。
        :type add_to_toolbar: bool
        :param status_tip: マウスポインタがアクション上にあるときにポップアップで表示されるオプションのテキスト。
        :type status_tip: str
        :param parent: 新しいアクションの親ウィジェット。デフォルトはNoneです。
        :type parent: QWidget
        :param whats_this: マウスポインタがアクション上にあるときにステータスバーに表示されるオプションのテキスト。

        :returns: 作成されたアクション。作成されたアクションはself.actionsリストにも追加されます。
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """QGIS GUI内でメニューエントリとツールバーアイコンを作成します"""

        icon_path = ':/plugins/PlateauStatisticsVisualizationPlugin/icon.png'
        self.add_action(
            icon_path,
            text=self.tr('Plateau Statistics Visualization Plugin'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """プラグインのダイアログウィジェットが閉じられたときに必要なクリーンアップを行います"""

        #print "** CLOSING PlateauStatisticsVisualizationPlugin"

        # 接続を解除
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # dockwidgetを残す場合は、このステートメントを削除する。
        # プラグインが再び開かれた場合に再利用するため
        # # ドッキングされたウィンドウを閉じるとQGISがクラッシュするため、次のステートメントはコメントアウトされています
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """プラグインのメニュー項目とアイコンをQGIS GUIから削除します"""

        #print "** UNLOAD PlateauStatisticsVisualizationPlugin"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr('&Plateau Statistics Visualization Plugin'),
                action)
            self.iface.removeToolBarIcon(action)
        # ツールバーを削除する
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """プラグインをロードして起動する関数"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING PlateauStatisticsVisualizationPlugin"

            # dockwidgetが存在しない場合があります:
            # - プラグインの最初の実行
            # - 閉じると削除される（self.onClosePlugin メソッドを参照）
            if self.dockwidget is None:
                # dockwidgetを作成（翻訳後）して参照を保持します
                self.dockwidget = (
                    PlateauStatisticsVisualizationPluginDockWidget()
                )
                self.dockwidget.buttonCreateDirectory.clicked.connect(
                    self._createDir
                )
                self.dockwidget.buttonMetricCalculation.clicked.connect(
                    self._calcMetric
                )
                self.dockwidget.buttonVisualize.clicked.connect(
                    self._visualizing
                )
                self.dockwidget.buttonOutput.clicked.connect(self._output)

            # dockwidgetを閉じたときにクリーンアップを提供するために接続します
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # dockwidgetを表示
            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

    def _createDir(self):
        """CreateDirectoryダイアログを使用してディレクトリ構造を作成する関数"""
        createDirectory = CreateDirectory(self.translator)
        createDirectory.exec_()

    def _calcMetric(self):
        """MetricCalculationダイアログを使用して指標計算を実行する関数"""
        metricCalculation = MetricCalculation(self.translator)
        metricCalculation.exec_()

    def _visualizing(self):
        """ControlDockおよびGraphDockを開き、可視化を行う関数"""

        if not self.control_dock:
            self.control_dock = ControlDock(self.iface.mainWindow(),
                                            self.translator)
            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.control_dock)
        else:
            self.control_dock.show()

        if not self.graph_dock:
            self.graph_dock = GraphDock(self.iface.mainWindow(),
                                        self.translator)
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.graph_dock)
        else:
            self.graph_dock.show()

        if not self.sub_graph_dock:
            self.sub_graph_dock = GraphDock(self.iface.mainWindow(),
                                            self.translator,
                                            1)
            self.iface.addDockWidget(Qt.RightDockWidgetArea,
                                     self.sub_graph_dock)
        else:
            self.sub_graph_dock.show()

        if not self.control_dock_called:
            self.control_dock.plotSignal.connect(
                self.graph_dock.update_plots_and_layer_coloring
            )
            self.control_dock.plotSignal_sub.connect(
                self.sub_graph_dock.update_plots
            )
            self.control_dock_called = True

    def _output(self):
        """データをエクスポートするためのOutputダイアログを開く関数"""
        outputDialog = Output(translator=self.translator)
        outputDialog.exec_()
