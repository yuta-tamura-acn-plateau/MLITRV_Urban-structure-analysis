"""
/***************************************************************************
 PlateauStatisticsVisualizationPlugin
                                 A QGIS plugin
 Urban Structure Assessment Dashboard
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-29
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Author
        email                : mail
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import sys
import xml.etree.ElementTree as ET

from PyQt5.QtWidgets import (QApplication, QDialog, QVBoxLayout,  # pylint: disable=import-error, no-name-in-module
                             QHBoxLayout, QPushButton, QLineEdit, QFileDialog)
from PyQt5.QtCore import Qt, QSize, QCoreApplication # pylint: disable=import-error, no-name-in-module
from PyQt5.QtWidgets import QSizePolicy, QMessageBox # pylint: disable=import-error, no-name-in-module
from ..algorithms.utils.dir_maker import DirMaker


class CreateDirectory(QDialog):
    """
    ディレクトリ構造を作成するためのダイアログクラス

    このクラスは、ユーザーがディレクトリのパスを指定し、選択したパスを基に
    ディレクトリ構造を作成するためのユーザーインターフェースを提供します。
    また、選択したディレクトリを構成ファイルに保存する機能も備えています。
    
    属性:
        config_dir (str): 設定ファイルが格納されているディレクトリのパス。
        config_file (str): 設定ファイル（MetricCalculationConfig.xml）のパス。
        cd_config_file (str): 設定ファイル（CreateDirectoryConfig.xml）のパス。
        directory_path (QLineEdit): ユーザーがディレクトリのパスを入力するテキストフィールド。

    メソッド:
        __init__(translator=None): 初期化メソッド。
        setup_translator(translator): 翻訳機能を設定します。
        initUI(): ダイアログのUIを設定します。
        browse_directory(): フォルダを参照して選択するダイアログを開きます。
        open_directory(): 選択したフォルダをエクスプローラーで開きます。
        create_directory(): 選択されたディレクトリパスを基にディレクトリ構造を作成します。
        loadSettings(): 構成ファイルから設定を読み込みダイアログに反映します。
        saveSettings(directory_path): 選択されたディレクトリパスを構成ファイルに保存します。
    """
    def __init__(self, translator=None):
        super().__init__()
        self.setup_translator(translator)
        self.config_dir = os.path.join(
            os.path.dirname(os.path.abspath(__file__)), '../config'
        )
        self.config_file = os.path.join(
            self.config_dir, 'MetricCalculationConfig.xml'
        )
        self.cd_config_file = os.path.join(
            self.config_dir, 'CreateDirectoryConfig.xml'
        )
        self.initUI()
        self.loadSettings()

    def setup_translator(self, translator):
        """
        国際化のための翻訳機能を設定します

        :param translator: 翻訳機能を利用するための翻訳オブジェクト。
        :type translator: QTranslator
        """
        if translator:
            QCoreApplication.installTranslator(translator)

    def initUI(self):
        """ディレクトリ構造作成ダイアログのユーザーインターフェースを初期化します"""
        self.setWindowTitle(self.tr('Creating directory structure'))
        layout = QVBoxLayout()

        hbox = QHBoxLayout()
        self.directory_path = QLineEdit()
        hbox.addWidget(self.directory_path)
        browse_button = QPushButton('...')
        browse_button.clicked.connect(self.browse_directory)
        hbox.addWidget(browse_button)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        open_button = QPushButton(self.tr('Open'))
        open_button.clicked.connect(self.open_directory)
        hbox.addWidget(open_button)
        hbox.addStretch(1)
        ok_button = QPushButton('OK')
        ok_button.clicked.connect(self.create_directory)
        hbox.addWidget(ok_button)
        cancel_button = QPushButton(self.tr('Cancel'))
        cancel_button.clicked.connect(self.reject)
        hbox.addWidget(cancel_button)
        layout.addLayout(hbox)

        self.setLayout(layout)
        self.resize(400, 150)

        self.setMinimumSize(300, 100)

        self.setWindowFlags(
            self.windowFlags() & ~Qt.WindowContextHelpButtonHint
        )
        self.directory_path.setSizePolicy(
            QSizePolicy.Expanding, QSizePolicy.Fixed
        )
        self.directory_path.setMinimumWidth(200)

        button_size = QSize(100, 30)
        for button in [browse_button, open_button, ok_button, cancel_button]:
            button.setMinimumSize(button_size)
            button.setMaximumSize(button_size)

        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(10)

    def browse_directory(self):
        """フォルダを参照して選択するダイアログを開きます"""
        directory = QFileDialog.getExistingDirectory(
            self, self.tr("Select Directory")
        )
        if directory:
            self.directory_path.setText(directory)

    def open_directory(self):
        """選択したフォルダをエクスプローラーで開きます"""
        directory = self.directory_path.text()
        if directory and os.path.exists(directory):
            os.startfile(directory)
        else:
            print(self.tr("The specified folder does not exist."))

    def create_directory(self):
        """選択されたディレクトリパスを基にディレクトリ構造を作成します"""
        directory = self.directory_path.text()
        if directory:
            try:
                dir_maker = DirMaker(directory)
                dir_maker.create_structure()

                message = (
                    self.tr("Directory creation completed:") + f'{directory}'
                )
                QMessageBox.information(
                    self,
                    self.tr("completed"),
                    message
                )
                self.accept()
            except Exception as e:
                print(self.tr(f"Failed to create directory: {e}"))
        else:
            print(self.tr("Path could not be found."))

        self.saveSettings(directory)

    def loadSettings(self):
        """設定を構成ファイルから読み込んでダイアログに反映します"""
        try:
            tree = ET.parse(self.cd_config_file)
            root = tree.getroot()
            self.directory_path.setText(root.find('folder').text)
        except FileNotFoundError:
            print(self.tr(
                "Configuration file not found. Using default values."
            ))
        except ET.ParseError:
            print(self.tr("XML parsing error. Using default values."))

    def saveSettings(self, directory_path):
        """
        選択されたディレクトリパスを構成ファイルに保存します

        :param directory_path: 保存するディレクトリのパス。
        :type directory_path: str
        """
        root = ET.Element('config')
        ET.SubElement(root, 'input_folder').text = directory_path
        ET.SubElement(root, 'output_folder').text = ''
        ET.SubElement(root, 'threshold_bus').text = ''
        ET.SubElement(root, 'threshold_railway').text = ''
        ET.SubElement(root, 'threshold_shelter').text = ''

        tree = ET.ElementTree(root)
        tree.write(self.config_file, encoding='utf-8', xml_declaration=True)

        root = ET.Element('config')
        ET.SubElement(root, 'folder').text = directory_path

        tree = ET.ElementTree(root)
        tree.write(self.cd_config_file, encoding='utf-8', xml_declaration=True)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = CreateDirectory()
    sys.exit(app.exec_())
