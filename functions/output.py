"""
/***************************************************************************
 PlateauStatisticsVisualizationPlugin
                                 A QGIS plugin
 Urban Structure Assessment Dashboard
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-29
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Author
        email                : mail
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import xml.etree.ElementTree as ET
import zipfile
from datetime import datetime

from qgis.PyQt.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel, # pylint: disable=import-error
                                QMessageBox, QSizePolicy,QPushButton,
                                QLineEdit, QFileDialog, QDialogButtonBox)
from qgis.PyQt.QtCore import QCoreApplication # pylint: disable=import-error
from PyQt5.QtGui import QFontMetrics # pylint: disable=import-error, no-name-in-module


_config_dir = os.path.join(
    os.path.dirname(os.path.abspath(__file__)), '../config'
)
_config_file = os.path.join(_config_dir, 'MetricCalculationConfig.xml')

class Output(QDialog):
    """
    Output ダイアログクラス

    このクラスは、出力フォルダを選択し、その中にCSVファイルを圧縮して
    ZIPファイルを生成するダイアログを提供します。ユーザーがフォルダを
    選択し、CSVファイルをZIPとして出力する処理を行います。

    属性:
        folderEdit (QLineEdit): 出力フォルダのパスを入力するためのLineEdit。
    メソッド:
        __init__(self, parent=None, translator=None): ダイアログを初期化し、翻訳を設定します。
        load_folder_config(self): XML構成ファイルを読み込み、レイヤー情報を取得する関数。
        setup_translator(self, translator): 国際化のための翻訳機能を設定します。
        initUI(self): 出力ダイアログのユーザーインターフェースを初期化する関数。
        selectFolder(self): 出力フォルダを選択するダイアログを開く関数。
        accept(self): ダイアログの受け入れを処理し、ZIPファイルを生成してダイアログを閉じる関数。
        generateZIP(self, output_folder): 指定されたフォルダ内のCSVファイルを含むZIPファイルを生成する関数。
    """
    def __init__(self, parent=None, translator=None):
        super(Output, self).__init__(parent)
        self.setup_translator(translator)
        self.setWindowTitle(self.tr("Output"))
        self.initUI()

    def load_folder_config(self):
        """
        XML構成ファイルを読み込み、レイヤー情報を取得する関数

        :returns: 出力フォルダのパス
        :rtype: str
        """
        print("load_layer_config")
        tree = ET.parse(_config_file)
        root = tree.getroot()
        outputFolder = root.find('output_folder').text
        return outputFolder

    def setup_translator(self, translator):
        """
        国際化のための翻訳機能を設定します
        
        :param translator: 翻訳オブジェクト
        :type translator: QTranslator
        """
        if translator:
            QCoreApplication.installTranslator(translator)

    def initUI(self):
        """
        出力ダイアログのユーザーインターフェースを初期化する関数

        :param translator: 翻訳オブジェクト
        :type translator: QTranslator
        """
        output_folder = self.load_folder_config()
        layout = QVBoxLayout()

        folderLayout = QHBoxLayout()
        folderLabel = QLabel(self.tr("Output Folder:"))
        self.folderEdit = QLineEdit()

        self.folderEdit.setSizePolicy(
            QSizePolicy.Expanding, QSizePolicy.Fixed
        )

        self.folderEdit.setText(output_folder)

        fontMetrics = QFontMetrics(self.folderEdit.font())
        textWidth = fontMetrics.width(output_folder) + 20
        self.folderEdit.setFixedWidth(textWidth)

        folderButton = QPushButton("...")
        folderButton.setFixedSize(20, 20)
        folderButton.clicked.connect(self.selectFolder)

        folderLayout.addWidget(folderLabel)
        folderLayout.addWidget(self.folderEdit)
        folderLayout.addWidget(folderButton)

        layout.addLayout(folderLayout)

        buttonBox = QDialogButtonBox(
            QDialogButtonBox.Ok | QDialogButtonBox.Cancel
        )
        buttonBox.accepted.connect(self.accept)
        buttonBox.rejected.connect(self.reject)
        layout.addWidget(buttonBox)

        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        self.setLayout(layout)

    def selectFolder(self):
        """出力フォルダを選択するダイアログを開く関数"""
        folder = QFileDialog.getExistingDirectory(
            self, self.tr("Select Output Folder")
        )
        if folder:
            self.folderEdit.setText(folder)

    def accept(self):
        """ダイアログの受け入れを処理し、ZIPファイルを生成してダイアログを閉じる関数"""
        outputFolder = self.folderEdit.text()
        print(f"outputFolder:{outputFolder}")
        self.generateZIP(outputFolder)
        super().accept()

    def generateZIP(self, output_folder):
        """
        指定されたフォルダ内のすべてのCSVファイルを含むZIPファイルを生成する関数

        :param output_folder: 出力するZIPファイルのフォルダ
        :type output_folder: str
        """
        print(f"Executing output: Folder = {output_folder}, Format = ZIP")
        csvFolder = self.load_folder_config()

        csv_files = [
            os.path.join(root, f) for root, _,
            files in os.walk(csvFolder) for f in files if f.endswith('.csv')
        ]

        if not csv_files:
            QMessageBox.warning(
                None,
                self.tr("ERROR"),
                self.tr(
                    "No CSV files were found in the selected folder:<br>%1"
                ).replace("%1", csvFolder)
            )
            return

        filename = os.path.join(
            output_folder,
            self.tr("valuation index_%1.zip").replace(
                "%1", datetime.now().strftime('%Y%m%d_%H%M%S')
            )
        )

        zipf = None
        try:
            zipf = zipfile.ZipFile(filename, 'w', zipfile.ZIP_DEFLATED)
            for file_path in csv_files:
                arcname = os.path.relpath(file_path, csvFolder)
                zipf.write(file_path, arcname)
                print(f"Added {file_path} to ZIP")
        except Exception as e:
            print(f"Error occurred while generating ZIP file: {e}")
        finally:
            if zipf:
                zipf.close()

        QMessageBox.information(None, self.tr("Success"),
                                self.tr("file generated successfully"))
        print(f"ZIP file generated successfully: {filename}")
